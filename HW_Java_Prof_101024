//No.1 Shallow & deep copy methods в классе Student с проверкой реализации в классе Main: 

//С принципами поверхностного и глубокого копирования пока не разобрался. Насколько я понял, в соответствии с информацей, которую нашел в интернете, поверхностное копирование заключается в создании двух ссылок на один объект в Хипе, т.е.:
Student student1 = new Student(параметры в соответствии с конструктором);
Student shallowCopyStudent = student1; 
//Получается, что второй (копируемый) студент - это переменная, которая хранит ссылку на объект, ссылку на которую хранит первая переменная - student1. И при изменении значений для любого студента через сеттеры, значения другого также
//меняются. 

//В случае же с глубоким копированием, при копировании первоначального объекта создается новый объект и при внесении изменений в любой из объектов, эти изменения никак не будут влиять на другой. 
//Но все методы "поверхностного" копированияю включают в себя создание нового объекта: 
 public Student shallowCopy() {
        return new Student (name, grade); //Создается новый объект. 
    }
//Здесть у меня тупик. 
//В общем, без глубокого понимания сути и разницы между методами, я просто "поверхностно" скопировал те методы, которые увидел на занятии. Требуется объяснение для "особо одаренных"....

1. Метод поверхностного копирования: 
    public Student shallowCopy() {
        return new Student (name, grade); //Создается новый объект. 
    }

2. Реализация поверхностного копирования через переопределенный метод clone(): 
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

public static void main(String[] args) throws CloneNotSupportedException{

        Student student1 = new Student("Tom", "10A");

        Student shallowCopyStudent = student1.shallowCopy();
        System.out.println("First student " + student1);
        System.out.println("New student copied from the first one: " + shallowCopyStudent);
        System.out.println("Students identical? " + student1.equals(shallowCopyStudent));
        Student shallowCopyStudent1 = (Student) student1.clone();
        System.out.println("shallowCopyStudent1 = " + shallowCopyStudent1);
        System.out.println(student1.equals(shallowCopyStudent1));
        System.out.println(student1==shallowCopyStudent1);


// №2 Написать метод generateMatrix(), который будет создавать матрицу размера m на n, у которой на побочной диагонали будут единицы, остальные значения 0.
// Input: n = 4, m = 3 

public class Main {

    public static void main(String[] args) {

        int[][] array = new int[4][3];

        diagonalFromFirstRowLR(array);
        System.out.println();
        diagonalFromSecondRowLR(array);

        diagonalFromFirstRowRL(array);
        System.out.println();
        diagonalFromSecondRowRL(array);

    }

     //Решение самой задачи:
     private static void diagonalFromSecondRowRL(int[][] array){
        for(int i = array.length-1; i>=0; i--){
            for(int j = 0; j <array[i].length; j++){
                if (i == j) array[i][j] = 1;
                else array[i][j] = 0;
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }
    }

    //Вариации на тему:
    private static void diagonalFromFirstRowLR(int[][] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (i == j)
                    array[i][j] = 1;
                else
                    array[i][j] = 0;
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static void diagonalFromSecondRowLR(int[][] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (i == j+1)
                    array[i][j] = 1;
                else
                    array[i][j] = 0;
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }

    }
 
    private static void diagonalFromFirstRowRL(int[][] array){
        for(int i = array.length-1; i>=0; i--){
            for(int j = 0; j <array[i].length; j++){
                if (i == j+1) array[i][j] = 1;
                else array[i][j] = 0;
                System.out.print(array[i][j] + " ");
            }
            System.out.println();
        }
    }

}

//№3. Написать метод, который проверяет, является ли массив отсортированным

public class Main {

    public static void main(String[] args) {

        int[] array = {15, 10, 8, 4, 7};
        int[] array1 = {4, 7, 8, 10, 15};
        System.out.println("is array sorted? " + isSorted(array));
        System.out.println("is array 1 sorted? " + isSorted(array1));

    }

    public static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length-1; i++) {
            if (array[i] > array[i + 1])
                return false;
        }
        return true;
    }

}

//№4. Написать метод, который выдает из исходного двумерного массива массив максимумов столбцов.

import java.util.Arrays;

public class Main {

    public static void main(String[] args) {

        int[][] array = {{25, 15, 19, 8}, {19, 32, 40, 45}};
        System.out.println(arrayColumnMaximum(array));
    }

    public static String arrayColumnMaximum(int[][] array){
        int max = array[0][0];
        int[] newArray = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (array[i][j] > max) max = array[i][j];
            }
            newArray[i] = max;
        }
        return Arrays.toString(newArray);
    }

}

