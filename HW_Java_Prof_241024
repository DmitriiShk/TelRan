//1. Перебрать LinkedList и найти самую короткую строку.

public class Main {

    public static void main(String[] args) {

        LinkedList<String> list = new LinkedList<>();
        list.add("Deep");
        list.add("into");
        list.add("that");
        list.add("darkness");
        list.add("peering");
        list.add("long");
        list.add("I");
        list.add("stood");
        list.add("there");
        list.add("wondering");
        list.add("fearing");

        System.out.println(list);
        System.out.println();

        System.out.println("Task No.1");

        String min = list.getFirst();
        for(String s : list){
            if(s.length()<min.length()){
                min = s;
            }
        }
        System.out.println("The element of the minimum length in the list is " + "'" + min + "'.");
        System.out.println();
    }
}

//2. Перебрать LinkedList и объединить все строки в одну с использованием разделителя "|".

import java.util.LinkedList;

public class Main {

    public static void main(String[] args) {

        LinkedList<String> list = new LinkedList<>();
        list.add("Deep");
        list.add("into");
        list.add("that");
        list.add("darkness");
        list.add("peering");
        list.add("long");
        list.add("I");
        list.add("stood");
        list.add("there");
        list.add("wondering");
        list.add("fearing");

        System.out.println(list);
        System.out.println();

        String singleStr = String.join(" | ", list);
        System.out.println(singleStr + " |");
    }
}

//3. Создать LinkedList с объектами вашего собственного класса и удалить все элементы, удовлетворяющие определенному условию.

public class Main {

    public static void main(String[] args) {

        Aircraft boing = new Aircraft("Boing-747", "Medium", 2000);
        Aircraft IL = new Aircraft("IL-72", "Long", 1986);
        Aircraft TU = new Aircraft("Tu-154", "Medium", 1995);
        Aircraft airbus = new Aircraft("Airbus a380", "Long", 2014);
        Aircraft AN = new Aircraft("AN-12", "short", 1984);

        LinkedList<Aircraft> aircrafts = new LinkedList<>();

        aircrafts.add(boing);
        aircrafts.add(IL);
        aircrafts.add(TU);
        aircrafts.add(airbus);
        aircrafts.add(AN);

        System.out.println(aircrafts);

        for (int i = 0; i<aircrafts.size(); i++){
            if(aircrafts.get(i).getYearOfManufacture() < 2000 || aircrafts.get(i).getModel().equals("Boing-747")){
                aircrafts.remove();
            }
        }

        System.out.println(aircrafts);
    }
}

    public class Aircraft {
    private String model;
    private String range;
    private int yearOfManufacture;

    public Aircraft(String model, String range, int yearOfManufacture){
        this.model = model;
        this.range = range;
        this.yearOfManufacture = yearOfManufacture;
    }

    public String getModel() {
        return model;
    }

    public String getRange() {
        return range;
    }

    public int getYearOfManufacture() {
        return yearOfManufacture;
    }

    @Override
    public String toString() {
        return "Aircraft{" +
                "model = '" + model + '\'' +
                ", range = '" + range + '\'' +
                ", yearOfManufacture = " + yearOfManufacture +
                '}';
    }
}

//4. Напишите метод, чтобы получить первое и последнее вхождение указанных элементов в связанном списке.

public class Main {

    public static void main(String[] args) {
        MyLinkedList ll = new MyLinkedList();
        int[] elements = {1, 4, 3, 2, 1, 2, 2, 0};
        for (int element : elements) {
            ll.append(element);
        }

        int targetElement = 2;
        int[] result = ll.findFirstAndLast(targetElement);
        System.out.println("First entry of the element in the list: " + result[0] + "; Second entry of the element in the list: " + result[1]);  // Вывод: 3 6
    }
}

public class MyLinkedList {

    Node head;

    void append(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node last = head;
        while (last.next != null) {
            last = last.next;
        }
        last.next = newNode;
    }

    int[] findFirstAndLast(int element) {
        int firstIndex = -1;
        int lastIndex = -1;
        Node current = head;
        int index = 0;

        while (current != null) {
            if (current.data == element) {
                if (firstIndex == -1) {
                    firstIndex = index;
                }
                lastIndex = index;
            }
            current = current.next;
            index++;
        }

        return new int[]{firstIndex, lastIndex};
    }
}

public class Node {

    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}




























